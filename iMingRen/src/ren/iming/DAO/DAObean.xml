<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-beans-2.5.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
           <!-- 这是配置数据库的第一种方式,在配置文件中内直接配置完成 -->
	<bean id="deal" class="ren.iming.model">
		
	</bean>
<!--     <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	  results in a setDriverClassName(String) call
	  <property name="driverClassName">
	    <value>com.mysql.jdbc.Driver</value>
	  </property>
	  <property name="url">
	    <value>jdbc:mysql://localhost/hibernate</value>
	  </property>
	  <property name="username">
	    <value>root</value>
	  </property>
	  <property name="password">
	    <value></value>
	  </property>
	</bean> -->
	<!-- 这是配置数据库的第二种方式,把配置内弄都放到另一个文件中,方面修改 -->
<!-- 	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="locations">
	        <value>classpath:jdbc.properties</value>
	    </property>
	</bean>
	
	<bean id="dataSource" destroy-method="close"
	      class="org.apache.commons.dbcp.BasicDataSource">
	    <property name="driverClassName" value="${jdbc.driverClassName}"/>
	    <property name="url" value="${jdbc.url}"/>
	    <property name="username" value="${jdbc.username}"/>
	    <property name="password" value="${jdbc.password}"/>
	</bean>
	
	<bean id = "user" class="com.spring.dao.UserDAO">
		<property name="source" ref="dataSource"></property>
	</bean>
	<bean id="log" class="com.spring.dao.DAOLog"></bean> -->
<!-- 	<aop:config>
		<aop:aspect ref="log">
			<aop:pointcut expression="execution(* com.spring.dao.UserDAO.add())" id="be"/>
			<aop:before method="before" pointcut-ref="be"/>
			<aop:after method="after" pointcut-ref="be"/>
			</aop:aspect>
	</aop:config> -->
</beans>